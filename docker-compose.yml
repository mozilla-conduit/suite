# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

services:
  #########################
  # BMO
  #########################

  bmo.test:
    platform: linux/amd64
    build:
      context: ../bmo/
      dockerfile: ./Dockerfile
    command: demo
    volumes:
      - bmo-data-dir:/app/data
    environment: &bmo_env
      BMO_db_host: bmo.db
      BMO_db_name: bugs
      BMO_db_pass: bugs
      BMO_db_user: bugs
      BMO_inbound_proxies: "*"
      BMO_memcached_namespace: bugzilla
      BMO_memcached_servers: memcached:11211
      BMO_urlbase: http://bmo.test/
      BUGZILLA_ALLOW_INSECURE_HTTP: 1
      BZ_ANSWERS_FILE: /app/conf/checksetup_answers_suite.txt
      CONDUIT_USER_API_KEY: zQ5TSBzq7tTZMtKYq9K1ZqJMjifKx3cPL7pIGk9Q
      CONDUIT_USER_LOGIN: conduit@mozilla.bugs
      CONDUIT_USER_PASSWORD: password123456789!
      HTTP_BACKEND: simple
      HTTPD_MaxClients: 1
      HTTPD_MaxRequestsPerChild: 4000
      HTTPD_MaxSpareServers: 1
      HTTPD_MinSpareServers: 1
      HTTPD_ServerLimit: 1
      HTTPD_StartServers: 1
      LOCALCONFIG_ENV: 1
      LOG4PERL_CONFIG_FILE: log4perl-suite.conf
      LOGGING_PORT: 5880
      PHABRICATOR_API_KEY: api-qdaethogwpld3wmn2cnhbh57wkux
      PHABRICATOR_APP_ID: 66365490f364fbafba439619f0f31b7a4a0d73528c485520adf3b295f934acda
      PHABRICATOR_AUTH_CALLBACK_URL: http://phabricator.test/auth/login/bmo:bmo.test/
      PHABRICATOR_BOT_API_KEY: 8G4ly8JkxbypZgh5XrdiHWExVEjPq5S3HvMBll1K
      PHABRICATOR_BOT_LOGIN: phab-bot@bmo.tld
      PHABRICATOR_BOT_PASSWORD: password123456789!
      PHABRICATOR_OAUTH_ID: 6iaYNVorOeYQaQ5vkwyC
      PHABRICATOR_OAUTH_SECRET: QNzdU5eRuhlHotvkh8KBgtR3yqxMG3czKfNks1qt
      PORT: 80
    healthcheck:
      test: ["CMD", "curl", "-sfk", "http://localhost", "-o/dev/null"]
    depends_on:
      bmo.db:
        condition: service_healthy
      memcached:
        condition: service_started
      tinyproxy:
        condition: service_started

  bmo.feed:
    platform: linux/amd64
    build:
      context: ../bmo/
      dockerfile: ./Dockerfile
    command: perl extensions/PhabBugz/bin/phabbugz_feed.pl start -d -f
    volumes:
      - bmo-data-dir:/app/data
    environment: *bmo_env
    restart: on-failure
    depends_on:
      - phabricator.test
      - bmo.db
      - memcached

  bmo.pushd:
    platform: linux/amd64
    build:
      context: ../bmo/
      dockerfile: ./Dockerfile
    command: perl extensions/Push/bin/bugzilla-pushd.pl start -d -f
    volumes:
      - bmo-data-dir:/app/data
    environment: *bmo_env
    restart: on-failure
    depends_on:
      - phabricator.test
      - bmo.db
      - memcached

  bmo.db:
    platform: linux/amd64
    image: mysql:8
    volumes:
      - bmo-mysql-db:/var/lib/mysql
      - "./docker/bmo/mysql:/etc/mysql/conf.d"
    tmpfs:
      - /tmp
    logging:
      driver: "none"
    environment:
      MYSQL_DATABASE: bugs
      MYSQL_USER: bugs
      MYSQL_PASSWORD: bugs
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-ubugs", "-pbugs"]
      timeout: 180s

  memcached:
    platform: linux/amd64
    image: memcached:latest

  ###########################
  # Git-Hg-Sync
  ###########################

  git_hg_sync-cinnabar_init:
    platform: linux/amd64
    user: 101:101 # match the owner in the Cgit container
    build:
      context: ../git-hg-sync
    volumes:
      - ./docker/git-hg-sync/scripts:/scripts:ro
      - git-repos:/opt/git
      - cgit-cache:/opt/cgit/cache # we need access to this so we can clear the cache
    entrypoint: ["/scripts/cinnabar-init.sh"]
    depends_on:
      autoland.hg.test:
        condition: service_healthy
      git.test:
        condition: service_healthy

  git_hg_sync:
    platform: linux/amd64
    build:
      context: ../git-hg-sync
    command: --config /app/config-suite.toml --log-raw-level debug
    volumes:
      - ../git-hg-sync:/app:z
      - ./docker/git-hg-sync/config-suite.toml:/app/config-suite.toml
      - git_hg_sync_clones:/clones
    environment: &pulse_env
      PULSE_HOST: pulse.test
      PULSE_PORT: 5672
      PULSE_QUEUE: queue/suite/git-hg-sync
      PULSE_EXCHANGE: exchange/suite/git-hg-sync
      PULSE_ROUTING_KEY: git-hg-sync
      PULSE_SSL: "" # False
      # Same as the lando.hg-landing_worker
      SSH_PRIVATE_KEY: |
        -----BEGIN EC PRIVATE KEY-----
        MHcCAQEEIMiMNKEkf0vr4HrhUIrq0e9NjGNPArN7L1uy/HQZ1dA8oAoGCCqGSM49
        AwEHoUQDQgAEdakNgjerNLFXy1uMfwLjPd5/pBTbIEoZMdMV/o6s+uoMg776LF+v
        gtbfIaZbhDcJElzHwpnqGfHYU+cM4KyurA==
        -----END EC PRIVATE KEY-----
    depends_on:
      git_hg_sync-cinnabar_init:
        condition: service_completed_successfully
      pulse.test:
        condition: service_healthy

  #########################
  # Lando
  #########################

  lando:
    platform: linux/amd64
    build:
      context: ../lando/.
    image: suite_lando
    stdin_open: true
    tty: true
    environment: &lando-env
      <<: *pulse_env
      DJANGO_LOG_LEVEL: debug
      LOG_LEVEL: INFO
      DEFAULT_DB_HOST: lando.db
      ENVIRONMENT: local
      PHABRICATOR_URL: http://phabricator.test
      PHABRICATOR_UNPRIVILEGED_API_KEY: api-qdaethogwpld3wmn2cnhbh57wkux
      TREESTATUS_URL: https://treestatus.mozilla-releng.net
      # DATA_UPLOAD_MAX_MEMORY_SIZE: 10
    env_file: ../lando/.env
    command: bash -c "
      echo "version=0" > src/lando/version.py &&
      lando generate_version_file &&
      lando collectstatic --clear --no-input &&
      lando setup_dev &&
      lando runserver 0.0.0.0:80"
    user: "${UID:-}:${GID:-}" # needed for file generation in the mounted volumes
    depends_on:
      lando.db:
        condition: service_healthy
      git_hg_sync-cinnabar_init:
        condition: service_completed_successfully
      lando.redis:
        condition: service_healthy
      phabricator.test:
        condition: service_healthy

    volumes:
      - ../lando:/code
      - ../lando/staticfiles:/staticfiles
      - ../lando-prorotype/media:/mediafiles
    healthcheck:
      test: ["CMD", "curl", "-sfko/dev/null", "http://localhost/__heartbeat__"]
      interval: 10s
      timeout: 60s
      retries: 6

  lando.hg-landing-worker: &worker
    platform: linux/amd64
    image: suite_lando
    user: "${UID:-}:${GID:-}" # needed for file generation in the mounted volumes
    environment:
      <<: *lando-env
      DEFAULT_GRACE_SECONDS: 10
      LANDING_WORKER_USERNAME: app
      LANDING_WORKER_TARGET_SSH_PORT: 8022
      SSH_PRIVATE_KEY: |
        -----BEGIN EC PRIVATE KEY-----
        MHcCAQEEIMiMNKEkf0vr4HrhUIrq0e9NjGNPArN7L1uy/HQZ1dA8oAoGCCqGSM49
        AwEHoUQDQgAEdakNgjerNLFXy1uMfwLjPd5/pBTbIEoZMdMV/o6s+uoMg776LF+v
        gtbfIaZbhDcJElzHwpnqGfHYU+cM4KyurA==
        -----END EC PRIVATE KEY-----
    command: lando start_landing_worker hg
    volumes:
      - ../lando:/code
      - ../lando/staticfiles:/staticfiles
      - ../lando-prorotype/media:/mediafiles
    restart: on-failure
    depends_on:
      lando:
        condition: service_healthy
      lando.db:
        condition: service_healthy

  lando.git-landing-worker:
    <<: *worker
    command: lando start_landing_worker git

  lando.git-automation-worker:
    <<: *worker
    command: lando start_automation_worker git-automation-worker

  lando.db:
    platform: linux/amd64
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - lando-postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 1s
      timeout: 1s
      retries: 10

  lando.redis:
    platform: linux/amd64
    image: redis:7.2
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  lando.celery:
    platform: linux/amd64
    image: suite_lando
    command: lando start_celery_worker
    depends_on:
      lando.redis:
        condition: service_healthy

  ###############################
  # Phabricator
  ###############################

  phabricator:
    platform: linux/amd64
    build:
      context: ../phabricator/
      dockerfile: ./Dockerfile
      target: development
    entrypoint: /app/entrypoint.sh
    command: dev_start
    environment:
      MYSQL_HOST: phab.db
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASS: password
      PHABRICATOR_URI: http://phabricator.test/
      PHABRICATOR_CDN_URI: http://phabricator.test/
      BUGZILLA_URL: http://bmo.test
      BUGZILLA_AUTOMATION_USER: phab-bot@bmo.tld
      BUGZILLA_AUTOMATION_API_KEY: 8G4ly8JkxbypZgh5XrdiHWExVEjPq5S3HvMBll1K
    volumes:
      - phabricator-nginx:/app/nginx
      - ../phabricator/src:/app/phabricator/src
      - ../phabricator/moz-extensions:/app/moz-extensions
    restart: on-failure
    depends_on:
      phab.db:
        condition: service_healthy

  phab.db:
    platform: linux/amd64
    image: mysql:5.7
    volumes:
      - phabricator-mysql-db:/var/lib/mysql
      - ./docker/phabricator/mysql:/etc/mysql/conf.d:ro
      - ./docker/phabricator/demo.sql.gz:/docker-entrypoint-initdb.d/demo.sql.gz
    environment:
      - MYSQL_ROOT_PASSWORD=password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-ppassword"]
      interval: 10s
      timeout: 120s
      retries: 13
    restart: on-failure

  ###############################
  # Mercurial repositories
  ###############################

  autoland.treestatus:
    platform: linux/amd64
    image: mozilla/autolandtreestatus:latest
    restart: always

  autoland.hg-init:
    platform: linux/amd64
    image: mozilla/autolandhg:latest
    environment:
      ARCCONFIG: y
      PHABRICATOR_URI: http://phabricator.test
    command: init
    volumes:
      - autoland-hg:/repos

  autoland.hg:
    platform: linux/amd64
    image: mozilla/autolandhg:latest
    command: start
    restart: always
    environment:
      SSH_PUBLIC_KEY: "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHWpDYI3qzSxV8tbjH8C4z3ef6QU2yBKGTHTFf6OrPrqDIO++ixfr4LW3yGmW4Q3CRJcx8KZ6hnx2FPnDOCsrqw="
    volumes:
      - autoland-hg:/repos
    depends_on:
      - autoland.hg-init

  ###############################
  # Phabricator-Emails
  ###############################

  phabricator-emails-prepare: &defconf
    platform: linux/amd64
    build:
      context: ../phabricator-emails
    volumes:
      # Due to the current way the container is built, mounting the current source code is not sufficient
      # - ../phabricator-emails/:/app/:z
      - ./docker/phabricator-emails/settings.suite.ini:/app/.local/lib/python3.9/site-packages/settings.ini:z
    command: prepare
    depends_on:
      phabricator.test:
        condition: service_healthy
      phabricator-emails.db:
        condition: service_healthy

  phabricator-emails-migrate:
    <<: *defconf
    command: migrate
    depends_on:
      phabricator-emails-prepare:
        condition: service_completed_successfully

  phabricator-emails:
    <<: *defconf
    command: service
    depends_on:
      phabricator-emails-migrate:
        condition: service_completed_successfully

  phabricator-emails.db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - phabricator-emails-postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 1s
      timeout: 1s
      retries: 10

  ###########################
  # Git repositories
  ###########################

  cgit-init: &cgit-config
    platform: linux/amd64
    build:
      context: ../cgit-docker
    volumes:
      - ./docker/cgit/scripts:/scripts:ro
      - git-repos:/opt/git
      - cgit-cache:/opt/cgit/cache
    command: /scripts/conduit-init.sh

  git.test:
    <<: *cgit-config
    container_name: git.test
    command: ""
    environment:
      GIT_USER: lando
      # 'password'
      # generate with `htpasswd -n user | cut -d: -f2`
      # escape `$`s by doubling them
      GIT_PASSWORD: "$$apr1$$SnBWPBBG$$SucMwESCPMq5TmzS6mUeB1"
    healthcheck:
      test: ["CMD", "curl", "-sfk", "http://localhost", "-o/dev/null"]
    depends_on:
      cgit-init:
        condition: service_completed_successfully

  ###########################
  # LOCAL-DEV
  # Provide an ability to run all CLI developer needs:
  # * CVS push/pull to autoland.hg
  # * moz-phab to phabricator.test
  ###########################

  local-dev:
    platform: linux/amd64
    build:
      context: docker/local-dev
      dockerfile: ./Dockerfile
    environment:
      HTTP_ALLOWED: 1
    command: bash -c "cd review && pip3 install -e . && cd ~ && bash"
    volumes:
      - local-dev:/home/phab
      - ../review:/home/phab/review
    depends_on:
      - tinyproxy
      - phabricator.test
      - bmo.test
      - bmo.feed
      - bmo.pushd
      - autoland.hg.test

  ###########################
  # Pulse
  ###########################

  pulse.test:
    platform: linux/amd64
    image: rabbitmq:4-management-alpine
    volumes:
      - ./docker/rabbitmq/90-definitions-import.conf:/etc/rabbitmq/conf.d/90-definitions-import.conf
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 1

  ###########################
  # Proxies
  ###########################

  tinyproxy:
    platform: linux/amd64
    build:
      context: docker/tinyproxy
      dockerfile: ./Dockerfile
    ports:
      - "1080:1080"

  phabricator.test:
    platform: linux/amd64
    image: nginx:alpine
    volumes:
      - "./docker/phabricator/site.conf:/etc/nginx/conf.d/default.conf:ro"
      - phabricator-nginx:/app/nginx
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-sfk",
          "http://localhost",
          "-H",
          "Host: phabricator.test",
          "-o/dev/null",
        ]
    depends_on:
      - phabricator
      - tinyproxy

  lando.test:
    platform: linux/amd64
    build: ../lando/nginx
    depends_on:
      - lando
      - tinyproxy
    volumes:
      - ../lando/staticfiles:/staticfiles
      - ../lando/media:/mediafiles

  autoland.hg.test:
    platform: linux/amd64
    image: nginx:alpine
    container_name: hg.test
    volumes:
      - "./docker/autoland-hg/site.conf:/etc/nginx/conf.d/default.conf:ro"
      - autoland-hg:/repos
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-sfk", "http://localhost", "-o/dev/null"]
    depends_on:
      - autoland.hg
      - tinyproxy

  product-details.test:
    platform: linux/amd64
    image: nginx:alpine
    container_name: product-details.test
    volumes:
      - ./docker/product-details/site.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/product-details/1.0:/www/data/1.0
    restart: on-failure
    depends_on:
      - tinyproxy

###########################
# Volumes
###########################

volumes:
  autoland-hg:
  bmo-data-dir:
  bmo-mysql-db:
  caches_cache:
  cgit-cache:
  git-repos:
  git_hg_sync_clones:
  lando-postgres-db:
  local-dev:
  media:
  phabricator-emails-postgres-db:
  phabricator-mysql-db:
  phabricator-nginx:
